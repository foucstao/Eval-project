#端口号
server:
  tomcat:
    uri-encoding: UTF-8
    max-threads: 100
    min-spare-threads: 30
  port: 8007
#Spring 配置数据源
spring:
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eval?serverTimezone=Hongkong&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
    username: root
    password: 123456
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  main:
    allow-bean-definition-overriding: true
  data: 
    redis:
      # 地址
      host: localhost
      # 端口，默认为6379
      port: 6379
      # 数据库索引
      database: 0
      # 密码
      password:
      # 连接超时时间
      timeout: 10s
      lettuce:
        pool:
          # 连接池中的最小空闲连接
          min-idle: 0
          # 连接池中的最大空闲连接
          max-idle: 8
          # 连接池的最大数据库连接数
          max-active: 8
          # #连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1ms
# token配置
token:
  # 令牌自定义标识
  header: Authorization
  # 令牌密钥
  secret: cereshuzhitingnizhenbangcereshuzhitingnizhenbang
  # 令牌有效期（默认30分钟）
  expireTime: 60

# Mybatis配置
mybatis:
  typeAliasesPackage: com.**.pojo, com.**.vo
  # mapperLocations: classpath:mapper/*.xml
  mapperLocations: classpath:eval_mapper/*.xml, classpath:mapper/*.xml
  # 加载全局的配置文件
  configLocation: classpath:mybatis/mybatis-config.xml
  # configuration:
  #   map-underscore-to-camel-case: true

#logger日志
logging:
  file: 
    name: ./springboot.log
  level:
    #com.base: trace
    com.base: debug
    com.eval: debug

# #swagger UI
# swagger:
#   enabled: false

# # 配置swagger文档的访问路径，访问地址：http://127.0.0.1:8080/swagger-ui.html
# management:
#   endpoints:
#     web:
#       base-path: /rest/actuator
#       exposure:
#         include: '*'
# springdoc:
#   version: '@springdoc.version@'
#   swagger-ui:
#     display-request-duration: true
#     groups-order: DESC
#     operationsSorter: method
#     disable-swagger-default-url: true
#     use-root-path: true
#   show-actuator: true
#   group-configs:
#     - group: evals
#       paths-to-match: /api/eval/**
#   cache:
#     disabled: true
springdoc:
  swagger-ui:
    disable-swagger-default-url: true
    # 修改Swagger UI路径
    path: /swagger-ui.html
    # 开启Swagger UI界面
    enabled: true
  api-docs:
    # 修改api-docs路径
    path: /eval/api-docs
    # 开启api-docs
    enabled: true
  # 配置需要生成接口文档的扫描包
  packages-to-scan: com.eval 
  # 配置需要生成接口文档的接口路径
  paths-to-match: /api/eval/** 

# springdoc.group-configs:
#   - group: admin
#     displayName: User API
#     packagesToScan: com.base
#     pathsToMatch: /api/v1/**
#   - group: eval
#     displayName: Eval API
#     packagesToScan: com.eval
#     pathsToMatch: /api/eval/**
# springdoc:
#   version: 3.0
#   api-docs:
#     # OpenAPI文档开关, true: 开启OpenAPI文档访问功能, false: 关闭。
#     enabled: true       
#     # JSON格式的OpenAPI文档的访问路径
#     path: /v3/api-docs
#     # 扫描哪些包来生成OpenAPI文档, 多个包名用逗号分隔
#   packages-to-scan: com.eval
#   group-configs:
#     - group: eval-api-docs
#       paths-to-match: /api/v1/**
#   cache:
#     disabled: true
#   # 配置需要生成接口文档的接口路径
#   paths-to-match: /api/**, /admin/**
  # show-actuator: true
  # #或者指定访问接口路径扫描 
  # paths-to-match: /api/v1/**
  # 返回媒体类型匹配规则, 返回媒体类型符合这些匹配规则才会包含到OpenAPI文档中, 多个规则用逗号分隔
  # produces-to-match: /api/v1/** 
  # # 请求头匹配规则, 请求头符合这些匹配规则才会包含到OpenAPI文档中, 多个规则用逗号分隔
  # headers-to-match: /* 
  # # 请求媒体类型匹配规则, 请求媒体类型符合这些匹配规则才会包含到OpenAPI文档中, 多个规则用逗号分隔
  # consumes-to-match: /* 
  # # 排除路径匹配规则, API路径符合这些匹配规则会排除在OpenAPI文档之外, 多个规则用逗号分隔
  # paths-to-exclude: 
  # # 排除包匹配规则, 包名符合这些匹配规则会排除在OpenAPI文档之外, 多个规则用逗号分隔
  # packages-to-exclude: 
  # # 默认请求媒体类型
  # default-consumes-media-type: application/json
  # # 默认返回的响应媒体类型
  # default-produces-media-type: '*/*' 
  # # 是否禁用OpenAPI文档缓存, 
  # # 禁用后每次访问${springdoc.api-docs.path}都会重新生成(适合开发调试阶段)当响应会比较缓慢。
  # cache.disabled: false 
  # # 是否显示Spring Actuator的接口
  # show-actuator: false 
  # # 是否自动将类名生成为Tag
  # auto-tag-classes: true 
  # # 是否包含返回ModelAndView对象的接口
  # model-and-view-allowed: false 
  # # 是否从 @ControllerAdvice 注解获取接口的响应信息.
  # override-with-generic-response: true 
  # # 是否开启接口分组功能, 开启后, 一个App可以生成多个OpenAPI文档, 每个文档显示一部分接口。
  # api-docs.groups.enabled: true 
  # # 分组配置
  # group-configs:
  #     # 分组名称
  #   - group: XXX
  #     # 同`springdoc.packages-to-scan`
  #     packages-to-scan: *    
  #     # 同`springdoc.paths-to-match`
  #     paths-to-match: /*     
  #     # 同`springdoc.paths-to-exclude`
  #     paths-to-exclude: ``   
  #     # 同`springdoc.packages-to-exclude`
  #     packages-to-exclude:   
  #     # 同`springdoc.produces-to-match`
  #     produces-to-match: /*  
  #     # 同`springdoc.consumes-to-match`
  #     consumes-to-match: /*  
  #     # 同`springdoc.headers-to-match`
  #     headers-to-match: /* 
  # # webjar资源的访问路径前缀
  # webjars.prefix: /webjars 
  # # 是否翻译属性值, true: Schema中的属性的值可以用Spring的表达式来编写, 然后运行时自动转成真实的取值
  # api-docs.resolve-schema-properties: false 
  # # 删除无效的引用定义
  # remove-broken-reference-definitions: true 
  # # 是否格式化输出的OpenAPI文档, 方便人类阅读
  # writer-with-default-pretty-printer: false 
  # # 是否启用 deprecating model converter.
  # model-converters.deprecating-converter.enabled: true 
  # # 生成的Schema等组件的名称是否使用全名(类似java的Class.getName和getSimpleName的区别)
  # use-fqn: false # FQN是指 fully qualified names.
  # # 是否显示spring security的登录接口
  # show-login-endpoint: false
  # # 是否预加载OpenAPI文档, true: 程序启动的时候就生成OpenAPI文档, false: 第一次访问OpenAPI文档的时候生成。
  # pre-loading-enabled: false 
 
